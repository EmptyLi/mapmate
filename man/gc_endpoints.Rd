% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/networks.R
\name{gc_endpoints}
\alias{gc_endpoints}
\title{Generate a table of location pair samples}
\usage{
gc_endpoints(data, lon, lat, distance = TRUE, keep = TRUE)
}
\arguments{
\item{data}{a data frame.}

\item{lon}{character, the column in \code{data} referring to longitudes.}

\item{lat}{character, the column in \code{data} referring to latitudes.}

\item{distance}{logical, include a column of distances between locations along the shorter arc of the implied great circle. Defaults to \code{TRUE}.}

\item{keep}{logical, retain copies of other columns in \code{data} if \code{data} contained more than longitude and latitude columns. Defaults to \code{TRUE}.}
}
\value{
a data frame.
}
\description{
Expand a table of location samples to location pairs.
}
\details{
\code{gc_endpoints} expands a data frame of with longitude and latitude coordinate columns into one with four columns of \code{lon0}, \code{lat0}, \code{lon1} and \code{lat1} representing pairs of locations.
This is done in preparation for generating great circle arcs between each pair of locations. \code{gc_endpoints} provides the endpoints of these arcs.
See \code{gc_lines}, which is used subsequently on output from \code{gc_endpoints}, to generate an expanded data frame of the corresponding great circle ars.

\code{gc_endpoints} merely splits a data frame into its first and second halves of rows and then expands a table that has rows for every combination of pairs between the first and second halves of the original table.
This is a handy utility function for preparing data for simulated examples of network maps in the current version of \code{mapmate}.
In future versions a more robust \code{gc_endpoints} may offer other more controllable options for assembling location pairs.

When \code{keep=TRUE} columns in \code{data} other than those of longitudes and latitudes are similarly appended with \code{0} and \code{1} in the output,
corresponding to the columns \code{lon0/lat0} and to \code{lon1/lat1}, respectively.

If \code{data} contains \code{n} rows, then the data frame returned by \code{gc_endpoints} will contain \eqn{(n/2)^2} rows.
}
\examples{
\dontrun{library(dplyr)
data(network)
gc_endpoints(network, "lon", "lat")
gc_endpoints(network, "lon", "lat", distance=FALSE)
gc_endpoints(network, "lon", "lat", keep=FALSE)}
}
