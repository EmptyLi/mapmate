% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{save_seq}
\alias{save_seq}
\title{Save a sequence of still images to disk}
\usage{
save_seq(data, style = "map", use_mclapply = FALSE, mc.cores = 1L, ...)
}
\arguments{
\item{data}{a data frame containing networks, tiles, lines or polygons information.}

\item{style}{character, must be \code{style="map"} for maps (uses \code{save_map}) or \code{style="tsline"} for time series line graphs (uses \code{save_ts}).}

\item{use_mclapply}{\code{TRUE} for parallel processing. Must be \code{FALSE} (default) for non-Unix-alikes (e.g., Windows systems).}

\item{mc.cores}{integer, the number of CPU cores requested for parallel processing, passed to \code{mclapply}.}

\item{...}{additional arguments passed to \code{save_map} or \code{save_ts}.}
}
\value{
usually returns NULL after writing files to disk. May optionally return a list of ggplot objects with or without the file writing side effect.
}
\description{
Save a sequence of still images to disk with a single function call and data frame.
}
\details{
\code{save_seq} is a convenient wrapper function for \code{save_map} and \code{save_ts}. It provides some moderate generality and abstraction
by moving the most proximal aspects of data preparation inside the function, i.e., breaking a data frame into a list of data frame subsets by plot ID
and passing each explicitly to iterative calls to either \code{save_map} or \code{save_ts}.
The option for parallel processing on Linux systems (by forking with \code{parallel::mclapply}) is also part of \code{save_seq}.
Using \code{mclapply} was chosen for convenience and may be changed in a future package version.

It does not save much in the way of gross typing, but calling a single wrapper function, passing mostly the same arguments,
and not having to explicitly call \code{save_map} or \code{save_ts} withing the context of \code{map} or \code{walk} calls is arguably
cleaner, simpler, and less complex for some use cases.

The additional arguments \code{...} passed to \code{save_map} or \code{save_ts} are required, not optional.
Any call to \code{save_seq} will consist mostly of these arguments.
It is best to first make sure you can successfully call \code{save_map} and \code{save_ts} directly. Then try this wrapper function.
See the intoductory vignette for details: \code{browseVignettes(package="mapmate")}.
}
\examples{
\dontrun{
library(dplyr)
library(purrr)
data(annualtemps)
temps <- mutate(annualtemps, frameID = Year - min(Year) + 1) \%>\%
  group_by(Year, frameID) \%>\% summarise(z=mean(z))
xlm <- range(temps$Year)
ylm <- range(temps$z)

# should specify a dir or set working dir for file output
# consider running over a smaller subset of frame IDs
save_seq(temps, style="tsline", x="Year", y="z", id="frameID",
  col="blue", xlm=xlm, ylm=ylm)
}
}
